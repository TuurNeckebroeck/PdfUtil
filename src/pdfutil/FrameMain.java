package pdfutil;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;
import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;

/**
 *
 * @author Tuur Neckebroeck
 */
public class FrameMain extends javax.swing.JFrame {

    private FileList fileList = new FileList();

    /**
     * Creates new form FrameMerge
     */
    public FrameMain() {
        initComponents();
        listFiles.setModel(fileList.getDefaultListModel());

        new FileDrop(System.out, jPanel1, /*dragBorder,*/ new FileDrop.Listener() {
            public void filesDropped(java.io.File[] files) {
                for (int i = 0; i < files.length; i++) {
                    try {
                        FileType type = FileUtil.getFileType(files[i]);
                        System.out.println(type.toString());
                        if (type == FileType.PDF_ENCRYPTED || type == FileType.PDF_NOT_ENCRYPTED) {
                            //listModel.addElement(files[i].getCanonicalPath());
                            PDDocument doc;
                            boolean encrypted = false;
                            try {
                                doc = PDDocument.load(files[i]);
                                doc.close(); //als de pdf niet password protected is, wordt hij wel geladen en moet hij dus gesloten worden.
                            } catch (InvalidPasswordException e) {
                                encrypted = true;
                            }

                            //listModel.addElement(files[i].getCanonicalPath() + (encrypted ? " \uD83D\uDD12 " : ""));
                            FileListElement fle = new FileListElement(files[i]);
                            if (encrypted) {
                                fle.appendToDisplayText(" \uD83D\uDD12 ");
                            }
                            fileList.addElement(fle);
                            listFiles.setModel(fileList.getDefaultListModel());
                        }
                    } // end try
                    catch (java.io.IOException e) {
                        e.printStackTrace();
                    }
                }   // end for: through each dropped file
            }   // end filesDropped
        }); // end FileDrop.Listener
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameMain().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked");
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFiles = new javax.swing.JList<>();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnMerge = new javax.swing.JButton();
        btnPasswordProtect = new javax.swing.JButton();
        btnDisablePassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(200, 200, 200));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(220, 220, 220));

        listFiles.setDragEnabled(true);
        jScrollPane1.setViewportView(listFiles);

        btnUp.setText("Up");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setText("Down");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        btnDelete.setText("-");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        btnMerge.setText("Merge");
        btnMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMergeActionPerformed(evt);
            }
        });

        btnPasswordProtect.setText("Password protect");
        btnPasswordProtect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasswordProtectActionPerformed(evt);
            }
        });

        btnDisablePassword.setText("Disable password");
        btnDisablePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisablePasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMerge, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPasswordProtect, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDisablePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPasswordProtect, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(btnMerge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDisablePassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        if (listFiles.getSelectedIndices().length == 1) {
            int index = listFiles.getSelectedIndex();
            if (index == 0) {
                return;
            }
            fileList.moveUp(index);
            listFiles.setModel(fileList.getDefaultListModel());
            listFiles.setSelectedIndex(index - 1);
        }
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        if (listFiles.getSelectedIndices().length == 1) {
            int index = listFiles.getSelectedIndex();
            if (index == listFiles.getModel().getSize() - 1) {
                return;
            }

            fileList.moveDown(index);
            listFiles.setModel(fileList.getDefaultListModel());
            listFiles.setSelectedIndex(index + 1);
        }
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int indices[] = listFiles.getSelectedIndices();
        for (int i = indices.length - 1; i >= 0; i--) {
            fileList.removeElement(indices[i]);
        }
        listFiles.setModel(fileList.getDefaultListModel());
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnMergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeActionPerformed
        File files[] = getSelectedFiles();
        if(files.length == 0) return;

        PDFMergerUtility PDFmerger = new PDFMergerUtility();
        File destFile = FileUtil.addToFileName(files[0], "_merged");

        PDFmerger.setDestinationFileName(destFile.getAbsolutePath());
        List<PDDocument> docs = new ArrayList<>();

        try {
            for (File f : files) {
                PDDocument p = PDDocument.load(f);
                docs.add(p);
                PDFmerger.addSource(f);
            }
            PDFmerger.mergeDocuments();
            for (PDDocument p : docs) {
                p.close();
            }

            JOptionPane.showMessageDialog(this, "File saved as " + destFile);
            fileList.clear();
            listFiles.setModel(new DefaultListModel());
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnMergeActionPerformed

    private void btnPasswordProtectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasswordProtectActionPerformed
        List<File> encryptedFiles = new ArrayList<>();
        int[] indices = listFiles.getSelectedIndices();
        int nbSelectedFiles = indices.length;
        String password = JOptionPane.showInputDialog(this, "Pasword:");

        try {
            File files[] = new File[indices.length];
            for (int i = 0; i < indices.length; i++) {
                files[i] = fileList.get(indices[i]).getFile();
            }

            for (File file : files) {
                PDDocument doc = PDDocument.load(file);

// Define the length of the encryption key.
// Possible values are 40 or 128 (256 will be available in PDFBox 2.0).
                int keyLength = 128;

                AccessPermission ap = new AccessPermission();

                ap.setCanAssembleDocument(false);

                // Owner password (to open the file with all permissions) is "12345"
                // User password (to open the file but with restricted permissions, is empty here) 
                StandardProtectionPolicy spp = new StandardProtectionPolicy(password, password, ap);
                spp.setEncryptionKeyLength(keyLength);
                spp.setPermissions(ap);
                doc.protect(spp);

                File newFile = FileUtil.addToFileName(file, "_encrypted");
                doc.save(newFile);
                doc.close();
                encryptedFiles.add(newFile);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occured, not all files have been encrypted.");
        } finally {
            StringBuilder sb = new StringBuilder();
            if (nbSelectedFiles == encryptedFiles.size()) {
                sb.append("All of the files have been encrypted:");
            } else {
                sb.append(encryptedFiles.size());
                sb.append(" of the ");
                sb.append(nbSelectedFiles);
                sb.append(" selected files have been encrypted:");
            }

            for (File f : encryptedFiles) {
                sb.append("\n");
                sb.append(f.getAbsolutePath());
            }
            JOptionPane.showMessageDialog(this, sb.toString());
        }
    }//GEN-LAST:event_btnPasswordProtectActionPerformed

    private void btnDisablePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisablePasswordActionPerformed
        if (listFiles.getSelectedIndices().length != 1) {
            return;
        }
        int index = listFiles.getSelectedIndex();
        //TODO check if pdf is encrypted
        File file = fileList.get(index).getFile();
        String password = JOptionPane.showInputDialog(this, "Password of\n" + file.getAbsolutePath());
        try {
            PDDocument doc = PDDocument.load(file, password);
            doc.setAllSecurityToBeRemoved(true);
            File newFile = FileUtil.addToFileName(file, "_decrypted");
            doc.save(newFile);
        } catch (InvalidPasswordException ipe) {
            JOptionPane.showMessageDialog(this, "Invalid password.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDisablePasswordActionPerformed

    private File[] getSelectedFiles() {
        int[] indices = listFiles.getSelectedIndices();
        File files[] = new File[indices.length];
        for (int i = 0; i < indices.length; i++) {
            files[i] = fileList.get(indices[i]).getFile();
        }
        return files;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDisablePassword;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnMerge;
    private javax.swing.JButton btnPasswordProtect;
    private javax.swing.JButton btnUp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listFiles;
    // End of variables declaration//GEN-END:variables

    private final class FileList {

        private List<FileListElement> fileList = new ArrayList<>();

        public void addElement(FileListElement fle) {
            fileList.add(fle);
        }

        public void removeElement(int index) {
            this.fileList.remove(index);
        }

        public int getSize() {
            return this.fileList.size();
        }

        public String[] getDisplayNames() {
            String[] displayNames = new String[getSize()];
            for (int i = 0; i < getSize(); i++) {
                displayNames[i] = fileList.get(i).getDisplayText();
            }
            return displayNames;
        }

        public String[] getFiles() {
            String[] files = new String[getSize()];
            for (int i = 0; i < getSize(); i++) {
                files[i] = fileList.get(i).getFile().getAbsolutePath();
            }
            return files;
        }

        public void moveDown(int index) {
            if (index < 0 || index >= getSize() - 1) {
                return;
            }

            FileListElement element = fileList.get(index);
            fileList.remove(index);
            fileList.add(index + 1, element);
        }

        public void moveUp(int index) {
            if (index <= 0 || index > getSize() - 1) {
                return;
            }

            FileListElement element = fileList.get(index);
            fileList.remove(index);
            fileList.add(index - 1, element);
        }

        public DefaultListModel getDefaultListModel() {
            DefaultListModel model = new DefaultListModel();
            for (FileListElement el : fileList) {
                model.addElement(el.getDisplayText());
            }
            return model;
        }

        public void clear() {
            for (int i = 0; i < getSize(); i++) {
                removeElement(0);
            }
        }

        public FileListElement get(int index) {
            return fileList.get(index);
        }
    }

    private final class FileListElement {

        private final File file;
        private String displayText;

        public FileListElement(File f) {
            this.file = f;
            this.setDisplayText(f.getAbsolutePath());
        }

        public void setDisplayText(String text) {
            this.displayText = text;
        }

        public void appendToDisplayText(String s) {
            setDisplayText(displayText + s);
        }

        public String getDisplayText() {
            return this.displayText;
        }

        public File getFile() {
            return this.file;
        }

    }
}
